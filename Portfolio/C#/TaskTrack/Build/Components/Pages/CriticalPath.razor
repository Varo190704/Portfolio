@page "/critical-path"
@using System.ComponentModel.DataAnnotations
@using Domain.Enum

<PageTitle>Ruta Crítica</PageTitle>

@inject IProjectManager ProjectManager
@inject ITaskManager TaskManager

<h3>Ruta Crítica del Proyecto</h3>

<EditForm Model="newProject" OnValidSubmit="SelectProject">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="card mb-4 p-3">
        <h5>Calcular Ruta Critica</h5>
            <div class="mb-3 col-md-6">
                <label class="form-label">Seleccionar Poryecto</label>
                <InputSelect class="form-select" @bind-Value="newProject.Name">
                    <option value="non">-- elige un Proyecto --</option>
                    @foreach (Domain.Utilities.Project p in Projects)
                    {
                        <option value="@p.Name">@p.Name</option>
                    }
                </InputSelect>
            </div>
        <button type="submit" class="btn btn-primary">Calcular Ruta Crítica</button>
    </div>
</EditForm>
@if(!Equals(SelProject, null)){
    
    <div class="card p-3">
        <h5>Diagrama de Gantt - Ruta Crítica</h5>
        <div class="gantt-chart">
            @foreach (var task in SelProject.getCriticalPath())
            {
                int startOffset = (task.StartDate.DayOfYear - MinDate.DayOfYear); 
                int barWidth = task.Duration; 

                var barColor = task.Status switch
                {
                    TaskProgress.Completed => "bg-succes",
                    TaskProgress.InProgress => "bg-primary",
                    TaskProgress.Pending => "bg-warning",
                };

                <div class="gantt-task mb-2" style="margin-left:@($"{startOffset}px");">
                    <div class="progress">
                        <div class="progress-bar @barColor" style="width:@($"{barWidth}px");">
                            @task.Name (@task.Duration días)
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    
    <br>
    <br>
    <br>
    <div class="card p-3 mb-4">
        <h5>Resumen del Proyecto: @SelProject.Name</h5>
        <p><strong>Proyecto:</strong> @SelProject.Name</p>
        <p><strong>Inicio Estimado:</strong> @SelProject.StartDate.ToString("MM-dd-yyyy")</p>
        <p><strong>Fin Estimado:</strong> @SelProject.EndDate.ToString("MM-dd-yyyy")</p>
        <p><strong>Duracion:</strong> @SelProject.Duration</p>
    </div>

    <div class="card p-3">
        <h5>Tareas en la Ruta Crítica</h5>
        <table class="table table-striped mt-3">
            <thead>
            <tr>
                <th>Tarea</th>
                <th>Duración (días)</th>
                <th>Inicio Estimado</th>
                <th>Fin Estimado</th>
                <th>Recursos Asignados</th>
            </tr>
            </thead>
                <tbody>
                @foreach (Domain.Utilities.Task task in SelProject.getCriticalPath())
                {
                    <tr>
                        <td>@task.Name</td>
                        <td>@task.Duration</td>
                        <td>@task.StartDate.ToString("MM-dd-yyyy")</td>
                        <td>@task.StartDate.AddDays(task.Duration).ToString("MM-dd-yyyy")</td>
                        <td>
                        @foreach (Domain.Utilities.Resource resource in task.Resources)
                        {
                            <span>@resource.Name,</span>
                        }
                        </td>
                    </tr>
                }
                </tbody>
        </table>
    </div>
}

@code
{
    private List<Domain.Utilities.Project> Projects;
    private Domain.Utilities.Project SelProject;
    private List<Domain.Utilities.Task> Tasks;
    private ProjectViewModel newProject = new ProjectViewModel();
    private DateOnly MinDate;

    protected override void OnInitialized()
    {
        Projects = ProjectManager.getAllProjects().ToList();
        if (Tasks != null && Tasks.Any())
        {
            MinDate = Tasks.Min(t => t.StartDate);
        }
    }
    
    private void SelectProject()
    {
        SelProject = ProjectManager.getProjectsByName(newProject.Name);
        Tasks = SelProject.getCriticalPath();
    }
    
    public class ProjectViewModel
    {
        [Required(ErrorMessage = "Selecciona un projecto.")]
        [NotNon(ErrorMessage = "No es válido tu selección")]
        public string Name { get; set; }
    }

}
