@page "/task"
@using System.ComponentModel.DataAnnotations
@using Domain.Aplication.Services
@using Domain.Enum

@inject ITaskManager     TaskManager
@inject IUserManager     UserManager
@inject IProjectManager     ProjectManager
@inject IResourceManager     ResourceManager

<PageTitle>Gestión de Tareas</PageTitle>
@if (Equals(currentUser, null))
{
    <h3>Necesita iniciar sesión antes de poder ver las tareas o crear alguna</h3>
}
else
{
    <h3>Gestión de Tareas</h3>
    if (UserManager.getUserByName("admin@sistema.com").login || Users.FirstOrDefault(user => user.Types.Contains(UserType.ProjectAdmin) && user.login) != null)
    {
        if (Tasks == null)
        {
            <p>Cargando datos…</p>
        }
        else
        {
            <EditForm Model="newTask" OnValidSubmit="createTask">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="card p-3 mb-4">
                    <h5>Nueva Tarea</h5>

                    <div class="row">
                        <div class="mb-3 col-md-6">
                            <label class="form-label">Título</label>
                            <InputText class="form-control" @bind-Value="newTask.TaskName" />
                        </div>

                        <div class="mb-3 col-md-6">
                            <label class="form-label">Descripción</label>
                            <InputText class="form-control" @bind-Value="newTask.TaskDescription"/>
                        </div>

                        <div class="mb-3 col-md-4">
                            <label class="form-label">Fecha de inicio estimada</label>
                            <InputDate class="form-control" @bind-Value="newTask.TaskDate"/>
                        </div>

                        <div class="mb-3 col-md-4">
                            <label class="form-label">Duración (días)</label>
                            <InputNumber class="form-control" @bind-Value="newTask.TaskDuration"/>
                        </div>

                        <div class="mb-3 col-md-6">
                            <label class="form-label">Dependencias (otras tareas)</label>
                            @foreach (Domain.Utilities.Task t in Tasks)
                            {
                                <div>
                                    <input type="checkbox" checked="@isSelect.Contains(t.Name)" @onchange="e => OnDependencyChanged(e, t.Name)" />
                                    <label>@t.Name</label>
                                </div>
                            }
                            <small class="form-text text-muted">Marca todas las tareas de las que dependa esta nueva.</small>
                        </div>
                    </div>
                    @if (showError)
                    {
                        <div class="alert alert-danger mb-3" role="alert">
                            <p><strong>Error:</strong>@messageError</p>
                        </div>
                    }
                    <button type="submit" class="btn btn-success">Agregar Tarea</button>
                </div>
            </EditForm>
        }
    }
    <div class="card p-3">
        <h5>Tareas Existentes</h5>
        <table class="table table-striped">
            <thead>
            <tr>
                <th>Título</th>
                <th>Descripción</th>
                <th>Duración</th>
                <th>Estado</th>
                <th>Fecha Ejecución</th>
                <th>Dependencias</th>
            </tr>
            </thead>
            <tbody>
            @if (UserManager.getUserByName("admin@sistema.com").login)
            {
                foreach (Domain.Utilities.Task task in Tasks)
                {
                    <tr>
                        <td>@task.Name</td>
                        <td>@task.Description</td>
                        <td>@task.Duration</td>
                        <td>
                            @(task.Status == TaskProgress.Pending ? "Pendiente" :
                            task.Status == TaskProgress.InProgress ? "En proceso" : "Completada")
                        </td>
                        <td>@task.StartDate</td>
                        <td>
                            @foreach (Domain.Utilities.Task depend in task.Dependencies)
                            {
                                <span>@depend.Name,</span>
                            }
                        </td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" @onclick="() => DelTask(task)">Borrar</button>
                        </td>
                    </tr>
                }    
            }
            else
            {
                foreach (Domain.Utilities.Task task in currentUser.tasks)
                {
                    <tr>
                        <td>@task.Name</td>
                        <td>@task.Description</td>
                        <td>@task.Duration</td>
                        <td>@task.Status</td>
                        <td>@task.StartDate</td>
                        <td>
                            @foreach (Domain.Utilities.Task depend in task.Dependencies)
                            {
                                <span>@depend.Name,</span>
                            }
                        </td>
                    </tr>
                } 
            }
            </tbody>
        </table>
        @if (showError2)
        {
            <div class="alert alert-danger mb-3" role="alert">
                <p><strong>Error:</strong>@messageError2</p>
            </div>
        }
    </div>
}

@code{

    private List<Domain.Utilities.Task> Tasks;
    private List<Project> Projects;
    private List<User> Users;
    private NewTaskModel newTask = new NewTaskModel
    {
        TaskDate = new DateOnly(2025, 7, 1),
        TaskDuration = 1
    };
    private List<string> isSelect = new();
    private bool showError = false;
    private string messageError = "";
    private bool showError2 = false;
    private string messageError2 = "";
    private User currentUser;
    
    protected override void OnInitialized()
    {
        Tasks = TaskManager.getAllTasks().ToList();
        Users = UserManager.getAllUsers().ToList();
        Projects = ProjectManager.getAllProjects().ToList();
        currentUser = Users.FirstOrDefault(u => u.login);
    }

    private void allFalse()
    {
        showError2 = false;
        showError = false;
    }
    
    private void DelTask(Domain.Utilities.Task task)
    {
        showError2 = Projects.Any(p => p.Tasks.Any(t => t.Name == task.Name));

        if (showError2)
        {
            messageError2 = $"Imposible borrar «{task.Name}»: sigue asignada a un proyecto.";
        }
        else
        {
            TaskManager.deleteTask(task);
            Tasks = TaskManager.getAllTasks().ToList();
            showError2 = false;
            messageError2 = "";
            ProjectManager.AlwaysUpdateTasks(Tasks, Projects);
            Projects = ProjectManager.getAllProjects().ToList();
            allFalse();
        }        
    }

    private void OnDependencyChanged(ChangeEventArgs e, string name)
    {
        var isChecked = (bool)e.Value;
        if (isChecked)
            isSelect.Add(name);
        else
            isSelect.Remove(name);
    }


    public void createTask()
    {
        string name = newTask.TaskName;
        string description = newTask.TaskDescription;
        DateOnly earlyStart = newTask.TaskDate;
        int duration = newTask.TaskDuration;
        TaskProgress progress = TaskProgress.Pending;

        if (!Equals(TaskManager.getTasksByName(name), null))
        {
            showError = true;
            messageError = "Ya existe una Tarea creado bajo ese titulo";
        }
        else
        {
            Domain.Utilities.Task task = new Domain.Utilities.Task(name, description, earlyStart, duration, progress);
            DateOnly maxEnd = earlyStart;
            if (isSelect.Any())
            {
                maxEnd = DateOnly.MinValue;
                foreach (string depName in isSelect)
                {
                    Domain.Utilities.Task depTask = TaskManager.getTasksByName(depName);
                    if (depTask != null && depTask.EndDate > maxEnd)
                    {
                        maxEnd = depTask.EndDate;
                    }
                }
            }
            task.StartDate = maxEnd;
            task.EndDate   = maxEnd.AddDays(duration);
            TaskManager.createTask(task);
            foreach (string dep in isSelect)
            {
                TaskManager.AddDependency(task, TaskManager.getTasksByName(dep));
            }
            TaskManager.RecalculateCriticalPath();
            Tasks = TaskManager.getAllTasks().ToList();
            allFalse();

        }
        ProjectManager.AlwaysUpdateTasks(Tasks, Projects);
        Projects = ProjectManager.getAllProjects().ToList();
        newTask = new NewTaskModel();
        isSelect = new();
        newTask.TaskDate = new DateOnly(2025, 7, 1);
        newTask.TaskDuration = 1;
    }

    private class NewTaskModel
    {
        [Required(ErrorMessage = "El Título es obligatorio.")]
        public string TaskName { get; set; }

        [Required(ErrorMessage = "La Descripción es obligatoria.")]
        public string TaskDescription { get; set; }

        [Required(ErrorMessage = "La Fecha de Inicio es obligatorio.")]
        public DateOnly TaskDate { get; set; }

        [Required(ErrorMessage = "La Duración es obligatoria.")]
        [Range(1, int.MaxValue, ErrorMessage = "La duración debe ser igual o mayor a 1.")]
        public int TaskDuration { get; set; }

    }

}